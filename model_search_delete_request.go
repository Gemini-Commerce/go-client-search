/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
)

// checks if the SearchDeleteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchDeleteRequest{}

// SearchDeleteRequest struct for SearchDeleteRequest
type SearchDeleteRequest struct {
	// tenant_id for which remove costraints [#DOCGENBUG REQUIRED FIELD]
	TenantId *string `json:"tenantId,omitempty"`
	// constraints to remove (index name) [#DOCGENBUG REQUIRED FIELD]
	Constraints          []SearchDeleteConstraints `json:"constraints,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchDeleteRequest SearchDeleteRequest

// NewSearchDeleteRequest instantiates a new SearchDeleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchDeleteRequest() *SearchDeleteRequest {
	this := SearchDeleteRequest{}
	return &this
}

// NewSearchDeleteRequestWithDefaults instantiates a new SearchDeleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDeleteRequestWithDefaults() *SearchDeleteRequest {
	this := SearchDeleteRequest{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *SearchDeleteRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDeleteRequest) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *SearchDeleteRequest) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *SearchDeleteRequest) SetTenantId(v string) {
	o.TenantId = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *SearchDeleteRequest) GetConstraints() []SearchDeleteConstraints {
	if o == nil || IsNil(o.Constraints) {
		var ret []SearchDeleteConstraints
		return ret
	}
	return o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDeleteRequest) GetConstraintsOk() ([]SearchDeleteConstraints, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *SearchDeleteRequest) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []SearchDeleteConstraints and assigns it to the Constraints field.
func (o *SearchDeleteRequest) SetConstraints(v []SearchDeleteConstraints) {
	o.Constraints = v
}

func (o SearchDeleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchDeleteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchDeleteRequest) UnmarshalJSON(data []byte) (err error) {
	varSearchDeleteRequest := _SearchDeleteRequest{}

	err = json.Unmarshal(data, &varSearchDeleteRequest)

	if err != nil {
		return err
	}

	*o = SearchDeleteRequest(varSearchDeleteRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "constraints")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchDeleteRequest) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchDeleteRequest) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchDeleteRequest struct {
	value *SearchDeleteRequest
	isSet bool
}

func (v NullableSearchDeleteRequest) Get() *SearchDeleteRequest {
	return v.value
}

func (v *NullableSearchDeleteRequest) Set(val *SearchDeleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDeleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDeleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDeleteRequest(val *SearchDeleteRequest) *NullableSearchDeleteRequest {
	return &NullableSearchDeleteRequest{value: val, isSet: true}
}

func (v NullableSearchDeleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDeleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
