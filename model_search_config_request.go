/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
)

// checks if the SearchConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchConfigRequest{}

// SearchConfigRequest contains all the necessary to create or update an index
type SearchConfigRequest struct {
	// tenant_id for which create or update indexes configuration [#DOCGENBUG REQUIRED FIELD]
	TenantId *string `json:"tenantId,omitempty"`
	// contains index configurations fields [#DOCGENBUG REQUIRED FIELD]
	ConfigSchema         []SearchConfigSchema `json:"configSchema,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchConfigRequest SearchConfigRequest

// NewSearchConfigRequest instantiates a new SearchConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchConfigRequest() *SearchConfigRequest {
	this := SearchConfigRequest{}
	return &this
}

// NewSearchConfigRequestWithDefaults instantiates a new SearchConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchConfigRequestWithDefaults() *SearchConfigRequest {
	this := SearchConfigRequest{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *SearchConfigRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchConfigRequest) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *SearchConfigRequest) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *SearchConfigRequest) SetTenantId(v string) {
	o.TenantId = &v
}

// GetConfigSchema returns the ConfigSchema field value if set, zero value otherwise.
func (o *SearchConfigRequest) GetConfigSchema() []SearchConfigSchema {
	if o == nil || IsNil(o.ConfigSchema) {
		var ret []SearchConfigSchema
		return ret
	}
	return o.ConfigSchema
}

// GetConfigSchemaOk returns a tuple with the ConfigSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchConfigRequest) GetConfigSchemaOk() ([]SearchConfigSchema, bool) {
	if o == nil || IsNil(o.ConfigSchema) {
		return nil, false
	}
	return o.ConfigSchema, true
}

// HasConfigSchema returns a boolean if a field has been set.
func (o *SearchConfigRequest) HasConfigSchema() bool {
	if o != nil && !IsNil(o.ConfigSchema) {
		return true
	}

	return false
}

// SetConfigSchema gets a reference to the given []SearchConfigSchema and assigns it to the ConfigSchema field.
func (o *SearchConfigRequest) SetConfigSchema(v []SearchConfigSchema) {
	o.ConfigSchema = v
}

func (o SearchConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.ConfigSchema) {
		toSerialize["configSchema"] = o.ConfigSchema
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchConfigRequest) UnmarshalJSON(data []byte) (err error) {
	varSearchConfigRequest := _SearchConfigRequest{}

	err = json.Unmarshal(data, &varSearchConfigRequest)

	if err != nil {
		return err
	}

	*o = SearchConfigRequest(varSearchConfigRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "configSchema")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchConfigRequest) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchConfigRequest) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchConfigRequest struct {
	value *SearchConfigRequest
	isSet bool
}

func (v NullableSearchConfigRequest) Get() *SearchConfigRequest {
	return v.value
}

func (v *NullableSearchConfigRequest) Set(val *SearchConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchConfigRequest(val *SearchConfigRequest) *NullableSearchConfigRequest {
	return &NullableSearchConfigRequest{value: val, isSet: true}
}

func (v NullableSearchConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
