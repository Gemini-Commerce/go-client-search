/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchWriteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchWriteRequest{}

// SearchWriteRequest contains where and what data to write in search storage
type SearchWriteRequest struct {
	// tenant id data identifier where to write data [#DOCGENBUG REQUIRED FIELD]
	TenantId *string `json:"tenantId,omitempty"`
	// elasticsearch index identifier where to write data
	Index string `json:"index"`
	// A JSON array of documents to write or update
	Documents            []string `json:"documents"`
	AdditionalProperties map[string]interface{}
}

type _SearchWriteRequest SearchWriteRequest

// NewSearchWriteRequest instantiates a new SearchWriteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchWriteRequest(index string, documents []string) *SearchWriteRequest {
	this := SearchWriteRequest{}
	this.Index = index
	this.Documents = documents
	return &this
}

// NewSearchWriteRequestWithDefaults instantiates a new SearchWriteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchWriteRequestWithDefaults() *SearchWriteRequest {
	this := SearchWriteRequest{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *SearchWriteRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchWriteRequest) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *SearchWriteRequest) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *SearchWriteRequest) SetTenantId(v string) {
	o.TenantId = &v
}

// GetIndex returns the Index field value
func (o *SearchWriteRequest) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *SearchWriteRequest) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *SearchWriteRequest) SetIndex(v string) {
	o.Index = v
}

// GetDocuments returns the Documents field value
func (o *SearchWriteRequest) GetDocuments() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value
// and a boolean to check if the value has been set.
func (o *SearchWriteRequest) GetDocumentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Documents, true
}

// SetDocuments sets field value
func (o *SearchWriteRequest) SetDocuments(v []string) {
	o.Documents = v
}

func (o SearchWriteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchWriteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	toSerialize["index"] = o.Index
	toSerialize["documents"] = o.Documents

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchWriteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
		"documents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchWriteRequest := _SearchWriteRequest{}

	err = json.Unmarshal(data, &varSearchWriteRequest)

	if err != nil {
		return err
	}

	*o = SearchWriteRequest(varSearchWriteRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "index")
		delete(additionalProperties, "documents")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchWriteRequest) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchWriteRequest) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchWriteRequest struct {
	value *SearchWriteRequest
	isSet bool
}

func (v NullableSearchWriteRequest) Get() *SearchWriteRequest {
	return v.value
}

func (v *NullableSearchWriteRequest) Set(val *SearchWriteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchWriteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchWriteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchWriteRequest(val *SearchWriteRequest) *NullableSearchWriteRequest {
	return &NullableSearchWriteRequest{value: val, isSet: true}
}

func (v NullableSearchWriteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchWriteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
