/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// SearchParamFilterType the model 'SearchParamFilterType'
type SearchParamFilterType string

// List of searchParamFilterType
const (
	SEARCHPARAMFILTERTYPE_TERM  SearchParamFilterType = "TERM"
	SEARCHPARAMFILTERTYPE_TERMS SearchParamFilterType = "TERMS"
	SEARCHPARAMFILTERTYPE_RANGE SearchParamFilterType = "RANGE"
)

// All allowed values of SearchParamFilterType enum
var AllowedSearchParamFilterTypeEnumValues = []SearchParamFilterType{
	"TERM",
	"TERMS",
	"RANGE",
}

func (v *SearchParamFilterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchParamFilterType(value)
	for _, existing := range AllowedSearchParamFilterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchParamFilterType", value)
}

// NewSearchParamFilterTypeFromValue returns a pointer to a valid SearchParamFilterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchParamFilterTypeFromValue(v string) (*SearchParamFilterType, error) {
	ev := SearchParamFilterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchParamFilterType: valid values are %v", v, AllowedSearchParamFilterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchParamFilterType) IsValid() bool {
	for _, existing := range AllowedSearchParamFilterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to searchParamFilterType value
func (v SearchParamFilterType) Ptr() *SearchParamFilterType {
	return &v
}

type NullableSearchParamFilterType struct {
	value *SearchParamFilterType
	isSet bool
}

func (v NullableSearchParamFilterType) Get() *SearchParamFilterType {
	return v.value
}

func (v *NullableSearchParamFilterType) Set(val *SearchParamFilterType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchParamFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchParamFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchParamFilterType(val *SearchParamFilterType) *NullableSearchParamFilterType {
	return &NullableSearchParamFilterType{value: val, isSet: true}
}

func (v NullableSearchParamFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchParamFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
