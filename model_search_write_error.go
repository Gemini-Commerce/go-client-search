/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchWriteError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchWriteError{}

// SearchWriteError contain error information obtained during writing process in search storage
type SearchWriteError struct {
	// error identifier code
	Code string `json:"code"`
	// document key used to identify document
	DocumentKeyName *string `json:"documentKeyName,omitempty"`
	// document key identifier
	DocumentKeyValue *string `json:"documentKeyValue,omitempty"`
	// error description message
	Message              string `json:"message"`
	AdditionalProperties map[string]interface{}
}

type _SearchWriteError SearchWriteError

// NewSearchWriteError instantiates a new SearchWriteError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchWriteError(code string, message string) *SearchWriteError {
	this := SearchWriteError{}
	this.Code = code
	this.Message = message
	return &this
}

// NewSearchWriteErrorWithDefaults instantiates a new SearchWriteError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchWriteErrorWithDefaults() *SearchWriteError {
	this := SearchWriteError{}
	return &this
}

// GetCode returns the Code field value
func (o *SearchWriteError) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *SearchWriteError) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *SearchWriteError) SetCode(v string) {
	o.Code = v
}

// GetDocumentKeyName returns the DocumentKeyName field value if set, zero value otherwise.
func (o *SearchWriteError) GetDocumentKeyName() string {
	if o == nil || IsNil(o.DocumentKeyName) {
		var ret string
		return ret
	}
	return *o.DocumentKeyName
}

// GetDocumentKeyNameOk returns a tuple with the DocumentKeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchWriteError) GetDocumentKeyNameOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentKeyName) {
		return nil, false
	}
	return o.DocumentKeyName, true
}

// HasDocumentKeyName returns a boolean if a field has been set.
func (o *SearchWriteError) HasDocumentKeyName() bool {
	if o != nil && !IsNil(o.DocumentKeyName) {
		return true
	}

	return false
}

// SetDocumentKeyName gets a reference to the given string and assigns it to the DocumentKeyName field.
func (o *SearchWriteError) SetDocumentKeyName(v string) {
	o.DocumentKeyName = &v
}

// GetDocumentKeyValue returns the DocumentKeyValue field value if set, zero value otherwise.
func (o *SearchWriteError) GetDocumentKeyValue() string {
	if o == nil || IsNil(o.DocumentKeyValue) {
		var ret string
		return ret
	}
	return *o.DocumentKeyValue
}

// GetDocumentKeyValueOk returns a tuple with the DocumentKeyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchWriteError) GetDocumentKeyValueOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentKeyValue) {
		return nil, false
	}
	return o.DocumentKeyValue, true
}

// HasDocumentKeyValue returns a boolean if a field has been set.
func (o *SearchWriteError) HasDocumentKeyValue() bool {
	if o != nil && !IsNil(o.DocumentKeyValue) {
		return true
	}

	return false
}

// SetDocumentKeyValue gets a reference to the given string and assigns it to the DocumentKeyValue field.
func (o *SearchWriteError) SetDocumentKeyValue(v string) {
	o.DocumentKeyValue = &v
}

// GetMessage returns the Message field value
func (o *SearchWriteError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SearchWriteError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SearchWriteError) SetMessage(v string) {
	o.Message = v
}

func (o SearchWriteError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchWriteError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.DocumentKeyName) {
		toSerialize["documentKeyName"] = o.DocumentKeyName
	}
	if !IsNil(o.DocumentKeyValue) {
		toSerialize["documentKeyValue"] = o.DocumentKeyValue
	}
	toSerialize["message"] = o.Message

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchWriteError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchWriteError := _SearchWriteError{}

	err = json.Unmarshal(data, &varSearchWriteError)

	if err != nil {
		return err
	}

	*o = SearchWriteError(varSearchWriteError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "documentKeyName")
		delete(additionalProperties, "documentKeyValue")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchWriteError) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchWriteError) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchWriteError struct {
	value *SearchWriteError
	isSet bool
}

func (v NullableSearchWriteError) Get() *SearchWriteError {
	return v.value
}

func (v *NullableSearchWriteError) Set(val *SearchWriteError) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchWriteError) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchWriteError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchWriteError(val *SearchWriteError) *NullableSearchWriteError {
	return &NullableSearchWriteError{value: val, isSet: true}
}

func (v NullableSearchWriteError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchWriteError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
