/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
)

// checks if the SearchDeleteConstraints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchDeleteConstraints{}

// SearchDeleteConstraints struct for SearchDeleteConstraints
type SearchDeleteConstraints struct {
	Index                *string `json:"index,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchDeleteConstraints SearchDeleteConstraints

// NewSearchDeleteConstraints instantiates a new SearchDeleteConstraints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchDeleteConstraints() *SearchDeleteConstraints {
	this := SearchDeleteConstraints{}
	return &this
}

// NewSearchDeleteConstraintsWithDefaults instantiates a new SearchDeleteConstraints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDeleteConstraintsWithDefaults() *SearchDeleteConstraints {
	this := SearchDeleteConstraints{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *SearchDeleteConstraints) GetIndex() string {
	if o == nil || IsNil(o.Index) {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDeleteConstraints) GetIndexOk() (*string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *SearchDeleteConstraints) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *SearchDeleteConstraints) SetIndex(v string) {
	o.Index = &v
}

func (o SearchDeleteConstraints) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchDeleteConstraints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchDeleteConstraints) UnmarshalJSON(data []byte) (err error) {
	varSearchDeleteConstraints := _SearchDeleteConstraints{}

	err = json.Unmarshal(data, &varSearchDeleteConstraints)

	if err != nil {
		return err
	}

	*o = SearchDeleteConstraints(varSearchDeleteConstraints)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "index")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchDeleteConstraints) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchDeleteConstraints) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchDeleteConstraints struct {
	value *SearchDeleteConstraints
	isSet bool
}

func (v NullableSearchDeleteConstraints) Get() *SearchDeleteConstraints {
	return v.value
}

func (v *NullableSearchDeleteConstraints) Set(val *SearchDeleteConstraints) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDeleteConstraints) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDeleteConstraints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDeleteConstraints(val *SearchDeleteConstraints) *NullableSearchDeleteConstraints {
	return &NullableSearchDeleteConstraints{value: val, isSet: true}
}

func (v NullableSearchDeleteConstraints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDeleteConstraints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
