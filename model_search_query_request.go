/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchQueryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchQueryRequest{}

// SearchQueryRequest contains search request information about how and where to make the search
type SearchQueryRequest struct {
	// tenant to search on [#DOCGENBUG REQUIRED FIELD]
	TenantId *string                 `json:"tenantId,omitempty"`
	Type     *SearchQueryRequestType `json:"type,omitempty"`
	// contains the search request payload
	Payload              []SearchPayload `json:"payload"`
	AdditionalProperties map[string]interface{}
}

type _SearchQueryRequest SearchQueryRequest

// NewSearchQueryRequest instantiates a new SearchQueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchQueryRequest(payload []SearchPayload) *SearchQueryRequest {
	this := SearchQueryRequest{}
	var type_ SearchQueryRequestType = SEARCHQUERYREQUESTTYPE_STANDARD
	this.Type = &type_
	this.Payload = payload
	return &this
}

// NewSearchQueryRequestWithDefaults instantiates a new SearchQueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchQueryRequestWithDefaults() *SearchQueryRequest {
	this := SearchQueryRequest{}
	var type_ SearchQueryRequestType = SEARCHQUERYREQUESTTYPE_STANDARD
	this.Type = &type_
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *SearchQueryRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchQueryRequest) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *SearchQueryRequest) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *SearchQueryRequest) SetTenantId(v string) {
	o.TenantId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchQueryRequest) GetType() SearchQueryRequestType {
	if o == nil || IsNil(o.Type) {
		var ret SearchQueryRequestType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchQueryRequest) GetTypeOk() (*SearchQueryRequestType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchQueryRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SearchQueryRequestType and assigns it to the Type field.
func (o *SearchQueryRequest) SetType(v SearchQueryRequestType) {
	o.Type = &v
}

// GetPayload returns the Payload field value
func (o *SearchQueryRequest) GetPayload() []SearchPayload {
	if o == nil {
		var ret []SearchPayload
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *SearchQueryRequest) GetPayloadOk() ([]SearchPayload, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payload, true
}

// SetPayload sets field value
func (o *SearchQueryRequest) SetPayload(v []SearchPayload) {
	o.Payload = v
}

func (o SearchQueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchQueryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["payload"] = o.Payload

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchQueryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payload",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchQueryRequest := _SearchQueryRequest{}

	err = json.Unmarshal(data, &varSearchQueryRequest)

	if err != nil {
		return err
	}

	*o = SearchQueryRequest(varSearchQueryRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "type")
		delete(additionalProperties, "payload")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchQueryRequest) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchQueryRequest) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchQueryRequest struct {
	value *SearchQueryRequest
	isSet bool
}

func (v NullableSearchQueryRequest) Get() *SearchQueryRequest {
	return v.value
}

func (v *NullableSearchQueryRequest) Set(val *SearchQueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchQueryRequest(val *SearchQueryRequest) *NullableSearchQueryRequest {
	return &NullableSearchQueryRequest{value: val, isSet: true}
}

func (v NullableSearchQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
