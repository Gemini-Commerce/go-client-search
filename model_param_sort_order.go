/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// ParamSortOrder the model 'ParamSortOrder'
type ParamSortOrder string

// List of ParamSortOrder
const (
	PARAMSORTORDER_ASC  ParamSortOrder = "ASC"
	PARAMSORTORDER_DESC ParamSortOrder = "DESC"
)

// All allowed values of ParamSortOrder enum
var AllowedParamSortOrderEnumValues = []ParamSortOrder{
	"ASC",
	"DESC",
}

func (v *ParamSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParamSortOrder(value)
	for _, existing := range AllowedParamSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParamSortOrder", value)
}

// NewParamSortOrderFromValue returns a pointer to a valid ParamSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParamSortOrderFromValue(v string) (*ParamSortOrder, error) {
	ev := ParamSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParamSortOrder: valid values are %v", v, AllowedParamSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParamSortOrder) IsValid() bool {
	for _, existing := range AllowedParamSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ParamSortOrder value
func (v ParamSortOrder) Ptr() *ParamSortOrder {
	return &v
}

type NullableParamSortOrder struct {
	value *ParamSortOrder
	isSet bool
}

func (v NullableParamSortOrder) Get() *ParamSortOrder {
	return v.value
}

func (v *NullableParamSortOrder) Set(val *ParamSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableParamSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableParamSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParamSortOrder(val *ParamSortOrder) *NullableParamSortOrder {
	return &NullableParamSortOrder{value: val, isSet: true}
}

func (v NullableParamSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParamSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
