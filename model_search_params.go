/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
)

// checks if the SearchParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchParams{}

// SearchParams contains params needed to perform search
type SearchParams struct {
	// number of the record where to start to take result for pagination
	Offset *int64 `json:"offset,omitempty"`
	// number of search result for page
	Limit *int64 `json:"limit,omitempty"`
	// term to search
	Term *string `json:"term,omitempty"`
	// list of attributes where to search the indicated term, if not indicated it uses all in those present in index configuration
	Searchables []SearchParamSearchable `json:"searchables,omitempty"`
	// list of attribute and relative value which you want to filter search results
	Filters []SearchParamFilter `json:"filters,omitempty"`
	// attributes that you want to be present in search results
	Attributes []SearchParamAttribute `json:"attributes,omitempty"`
	// list of attributes you want to create aggregation to make filter suggestion
	Facets []SearchParamFacet `json:"facets,omitempty"`
	// params to sort search results
	Sorts                []SearchParamSort `json:"sorts,omitempty"`
	MinScore             *float32          `json:"minScore,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchParams SearchParams

// NewSearchParams instantiates a new SearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchParams() *SearchParams {
	this := SearchParams{}
	return &this
}

// NewSearchParamsWithDefaults instantiates a new SearchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchParamsWithDefaults() *SearchParams {
	this := SearchParams{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *SearchParams) GetOffset() int64 {
	if o == nil || IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParams) GetOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *SearchParams) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *SearchParams) SetOffset(v int64) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SearchParams) GetLimit() int64 {
	if o == nil || IsNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParams) GetLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SearchParams) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *SearchParams) SetLimit(v int64) {
	o.Limit = &v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *SearchParams) GetTerm() string {
	if o == nil || IsNil(o.Term) {
		var ret string
		return ret
	}
	return *o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParams) GetTermOk() (*string, bool) {
	if o == nil || IsNil(o.Term) {
		return nil, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *SearchParams) HasTerm() bool {
	if o != nil && !IsNil(o.Term) {
		return true
	}

	return false
}

// SetTerm gets a reference to the given string and assigns it to the Term field.
func (o *SearchParams) SetTerm(v string) {
	o.Term = &v
}

// GetSearchables returns the Searchables field value if set, zero value otherwise.
func (o *SearchParams) GetSearchables() []SearchParamSearchable {
	if o == nil || IsNil(o.Searchables) {
		var ret []SearchParamSearchable
		return ret
	}
	return o.Searchables
}

// GetSearchablesOk returns a tuple with the Searchables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParams) GetSearchablesOk() ([]SearchParamSearchable, bool) {
	if o == nil || IsNil(o.Searchables) {
		return nil, false
	}
	return o.Searchables, true
}

// HasSearchables returns a boolean if a field has been set.
func (o *SearchParams) HasSearchables() bool {
	if o != nil && !IsNil(o.Searchables) {
		return true
	}

	return false
}

// SetSearchables gets a reference to the given []SearchParamSearchable and assigns it to the Searchables field.
func (o *SearchParams) SetSearchables(v []SearchParamSearchable) {
	o.Searchables = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *SearchParams) GetFilters() []SearchParamFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []SearchParamFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParams) GetFiltersOk() ([]SearchParamFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *SearchParams) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []SearchParamFilter and assigns it to the Filters field.
func (o *SearchParams) SetFilters(v []SearchParamFilter) {
	o.Filters = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SearchParams) GetAttributes() []SearchParamAttribute {
	if o == nil || IsNil(o.Attributes) {
		var ret []SearchParamAttribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParams) GetAttributesOk() ([]SearchParamAttribute, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SearchParams) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []SearchParamAttribute and assigns it to the Attributes field.
func (o *SearchParams) SetAttributes(v []SearchParamAttribute) {
	o.Attributes = v
}

// GetFacets returns the Facets field value if set, zero value otherwise.
func (o *SearchParams) GetFacets() []SearchParamFacet {
	if o == nil || IsNil(o.Facets) {
		var ret []SearchParamFacet
		return ret
	}
	return o.Facets
}

// GetFacetsOk returns a tuple with the Facets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParams) GetFacetsOk() ([]SearchParamFacet, bool) {
	if o == nil || IsNil(o.Facets) {
		return nil, false
	}
	return o.Facets, true
}

// HasFacets returns a boolean if a field has been set.
func (o *SearchParams) HasFacets() bool {
	if o != nil && !IsNil(o.Facets) {
		return true
	}

	return false
}

// SetFacets gets a reference to the given []SearchParamFacet and assigns it to the Facets field.
func (o *SearchParams) SetFacets(v []SearchParamFacet) {
	o.Facets = v
}

// GetSorts returns the Sorts field value if set, zero value otherwise.
func (o *SearchParams) GetSorts() []SearchParamSort {
	if o == nil || IsNil(o.Sorts) {
		var ret []SearchParamSort
		return ret
	}
	return o.Sorts
}

// GetSortsOk returns a tuple with the Sorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParams) GetSortsOk() ([]SearchParamSort, bool) {
	if o == nil || IsNil(o.Sorts) {
		return nil, false
	}
	return o.Sorts, true
}

// HasSorts returns a boolean if a field has been set.
func (o *SearchParams) HasSorts() bool {
	if o != nil && !IsNil(o.Sorts) {
		return true
	}

	return false
}

// SetSorts gets a reference to the given []SearchParamSort and assigns it to the Sorts field.
func (o *SearchParams) SetSorts(v []SearchParamSort) {
	o.Sorts = v
}

// GetMinScore returns the MinScore field value if set, zero value otherwise.
func (o *SearchParams) GetMinScore() float32 {
	if o == nil || IsNil(o.MinScore) {
		var ret float32
		return ret
	}
	return *o.MinScore
}

// GetMinScoreOk returns a tuple with the MinScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParams) GetMinScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.MinScore) {
		return nil, false
	}
	return o.MinScore, true
}

// HasMinScore returns a boolean if a field has been set.
func (o *SearchParams) HasMinScore() bool {
	if o != nil && !IsNil(o.MinScore) {
		return true
	}

	return false
}

// SetMinScore gets a reference to the given float32 and assigns it to the MinScore field.
func (o *SearchParams) SetMinScore(v float32) {
	o.MinScore = &v
}

func (o SearchParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Term) {
		toSerialize["term"] = o.Term
	}
	if !IsNil(o.Searchables) {
		toSerialize["searchables"] = o.Searchables
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Facets) {
		toSerialize["facets"] = o.Facets
	}
	if !IsNil(o.Sorts) {
		toSerialize["sorts"] = o.Sorts
	}
	if !IsNil(o.MinScore) {
		toSerialize["minScore"] = o.MinScore
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchParams) UnmarshalJSON(data []byte) (err error) {
	varSearchParams := _SearchParams{}

	err = json.Unmarshal(data, &varSearchParams)

	if err != nil {
		return err
	}

	*o = SearchParams(varSearchParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "offset")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "term")
		delete(additionalProperties, "searchables")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "facets")
		delete(additionalProperties, "sorts")
		delete(additionalProperties, "minScore")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchParams) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchParams) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchParams struct {
	value *SearchParams
	isSet bool
}

func (v NullableSearchParams) Get() *SearchParams {
	return v.value
}

func (v *NullableSearchParams) Set(val *SearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchParams(val *SearchParams) *NullableSearchParams {
	return &NullableSearchParams{value: val, isSet: true}
}

func (v NullableSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
