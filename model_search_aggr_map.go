/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
)

// checks if the SearchAggrMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchAggrMap{}

// SearchAggrMap struct for SearchAggrMap
type SearchAggrMap struct {
	Results              []string `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchAggrMap SearchAggrMap

// NewSearchAggrMap instantiates a new SearchAggrMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchAggrMap() *SearchAggrMap {
	this := SearchAggrMap{}
	return &this
}

// NewSearchAggrMapWithDefaults instantiates a new SearchAggrMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchAggrMapWithDefaults() *SearchAggrMap {
	this := SearchAggrMap{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *SearchAggrMap) GetResults() []string {
	if o == nil || IsNil(o.Results) {
		var ret []string
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchAggrMap) GetResultsOk() ([]string, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *SearchAggrMap) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []string and assigns it to the Results field.
func (o *SearchAggrMap) SetResults(v []string) {
	o.Results = v
}

func (o SearchAggrMap) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchAggrMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchAggrMap) UnmarshalJSON(data []byte) (err error) {
	varSearchAggrMap := _SearchAggrMap{}

	err = json.Unmarshal(data, &varSearchAggrMap)

	if err != nil {
		return err
	}

	*o = SearchAggrMap(varSearchAggrMap)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchAggrMap) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchAggrMap) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchAggrMap struct {
	value *SearchAggrMap
	isSet bool
}

func (v NullableSearchAggrMap) Get() *SearchAggrMap {
	return v.value
}

func (v *NullableSearchAggrMap) Set(val *SearchAggrMap) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchAggrMap) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchAggrMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchAggrMap(val *SearchAggrMap) *NullableSearchAggrMap {
	return &NullableSearchAggrMap{value: val, isSet: true}
}

func (v NullableSearchAggrMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchAggrMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
