/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// SearchParamFacetType the model 'SearchParamFacetType'
type SearchParamFacetType string

// List of searchParamFacetType
const (
	SEARCHPARAMFACETTYPE_TERMS     SearchParamFacetType = "TERMS"
	SEARCHPARAMFACETTYPE_STATS     SearchParamFacetType = "STATS"
	SEARCHPARAMFACETTYPE_HISTOGRAM SearchParamFacetType = "HISTOGRAM"
)

// All allowed values of SearchParamFacetType enum
var AllowedSearchParamFacetTypeEnumValues = []SearchParamFacetType{
	"TERMS",
	"STATS",
	"HISTOGRAM",
}

func (v *SearchParamFacetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchParamFacetType(value)
	for _, existing := range AllowedSearchParamFacetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchParamFacetType", value)
}

// NewSearchParamFacetTypeFromValue returns a pointer to a valid SearchParamFacetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchParamFacetTypeFromValue(v string) (*SearchParamFacetType, error) {
	ev := SearchParamFacetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchParamFacetType: valid values are %v", v, AllowedSearchParamFacetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchParamFacetType) IsValid() bool {
	for _, existing := range AllowedSearchParamFacetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to searchParamFacetType value
func (v SearchParamFacetType) Ptr() *SearchParamFacetType {
	return &v
}

type NullableSearchParamFacetType struct {
	value *SearchParamFacetType
	isSet bool
}

func (v NullableSearchParamFacetType) Get() *SearchParamFacetType {
	return v.value
}

func (v *NullableSearchParamFacetType) Set(val *SearchParamFacetType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchParamFacetType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchParamFacetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchParamFacetType(val *SearchParamFacetType) *NullableSearchParamFacetType {
	return &NullableSearchParamFacetType{value: val, isSet: true}
}

func (v NullableSearchParamFacetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchParamFacetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
