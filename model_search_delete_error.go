/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
)

// checks if the SearchDeleteError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchDeleteError{}

// SearchDeleteError struct for SearchDeleteError
type SearchDeleteError struct {
	Constraints          *SearchDeleteConstraints `json:"constraints,omitempty"`
	Code                 *string                  `json:"code,omitempty"`
	Message              *string                  `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchDeleteError SearchDeleteError

// NewSearchDeleteError instantiates a new SearchDeleteError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchDeleteError() *SearchDeleteError {
	this := SearchDeleteError{}
	return &this
}

// NewSearchDeleteErrorWithDefaults instantiates a new SearchDeleteError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDeleteErrorWithDefaults() *SearchDeleteError {
	this := SearchDeleteError{}
	return &this
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *SearchDeleteError) GetConstraints() SearchDeleteConstraints {
	if o == nil || IsNil(o.Constraints) {
		var ret SearchDeleteConstraints
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDeleteError) GetConstraintsOk() (*SearchDeleteConstraints, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *SearchDeleteError) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given SearchDeleteConstraints and assigns it to the Constraints field.
func (o *SearchDeleteError) SetConstraints(v SearchDeleteConstraints) {
	o.Constraints = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SearchDeleteError) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDeleteError) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SearchDeleteError) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SearchDeleteError) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SearchDeleteError) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDeleteError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SearchDeleteError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SearchDeleteError) SetMessage(v string) {
	o.Message = &v
}

func (o SearchDeleteError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchDeleteError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchDeleteError) UnmarshalJSON(data []byte) (err error) {
	varSearchDeleteError := _SearchDeleteError{}

	err = json.Unmarshal(data, &varSearchDeleteError)

	if err != nil {
		return err
	}

	*o = SearchDeleteError(varSearchDeleteError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "constraints")
		delete(additionalProperties, "code")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchDeleteError) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchDeleteError) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchDeleteError struct {
	value *SearchDeleteError
	isSet bool
}

func (v NullableSearchDeleteError) Get() *SearchDeleteError {
	return v.value
}

func (v *NullableSearchDeleteError) Set(val *SearchDeleteError) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDeleteError) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDeleteError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDeleteError(val *SearchDeleteError) *NullableSearchDeleteError {
	return &NullableSearchDeleteError{value: val, isSet: true}
}

func (v NullableSearchDeleteError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDeleteError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
