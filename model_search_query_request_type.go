/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// SearchQueryRequestType the model 'SearchQueryRequestType'
type SearchQueryRequestType string

// List of searchQueryRequestType
const (
	SEARCHQUERYREQUESTTYPE_STANDARD    SearchQueryRequestType = "STANDARD"
	SEARCHQUERYREQUESTTYPE_AS_YOU_TYPE SearchQueryRequestType = "AS_YOU_TYPE"
)

// All allowed values of SearchQueryRequestType enum
var AllowedSearchQueryRequestTypeEnumValues = []SearchQueryRequestType{
	"STANDARD",
	"AS_YOU_TYPE",
}

func (v *SearchQueryRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchQueryRequestType(value)
	for _, existing := range AllowedSearchQueryRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchQueryRequestType", value)
}

// NewSearchQueryRequestTypeFromValue returns a pointer to a valid SearchQueryRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchQueryRequestTypeFromValue(v string) (*SearchQueryRequestType, error) {
	ev := SearchQueryRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchQueryRequestType: valid values are %v", v, AllowedSearchQueryRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchQueryRequestType) IsValid() bool {
	for _, existing := range AllowedSearchQueryRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to searchQueryRequestType value
func (v SearchQueryRequestType) Ptr() *SearchQueryRequestType {
	return &v
}

type NullableSearchQueryRequestType struct {
	value *SearchQueryRequestType
	isSet bool
}

func (v NullableSearchQueryRequestType) Get() *SearchQueryRequestType {
	return v.value
}

func (v *NullableSearchQueryRequestType) Set(val *SearchQueryRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchQueryRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchQueryRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchQueryRequestType(val *SearchQueryRequestType) *NullableSearchQueryRequestType {
	return &NullableSearchQueryRequestType{value: val, isSet: true}
}

func (v NullableSearchQueryRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchQueryRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
