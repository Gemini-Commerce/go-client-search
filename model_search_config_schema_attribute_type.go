/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// SearchConfigSchemaAttributeType the model 'SearchConfigSchemaAttributeType'
type SearchConfigSchemaAttributeType string

// List of searchConfigSchemaAttributeType
const (
	SEARCHCONFIGSCHEMAATTRIBUTETYPE_TEXT    SearchConfigSchemaAttributeType = "TEXT"
	SEARCHCONFIGSCHEMAATTRIBUTETYPE_BOOLEAN SearchConfigSchemaAttributeType = "BOOLEAN"
	SEARCHCONFIGSCHEMAATTRIBUTETYPE_INTEGER SearchConfigSchemaAttributeType = "INTEGER"
	SEARCHCONFIGSCHEMAATTRIBUTETYPE_FLOAT   SearchConfigSchemaAttributeType = "FLOAT"
	SEARCHCONFIGSCHEMAATTRIBUTETYPE_DATE    SearchConfigSchemaAttributeType = "DATE"
	SEARCHCONFIGSCHEMAATTRIBUTETYPE_OBJECT  SearchConfigSchemaAttributeType = "OBJECT"
)

// All allowed values of SearchConfigSchemaAttributeType enum
var AllowedSearchConfigSchemaAttributeTypeEnumValues = []SearchConfigSchemaAttributeType{
	"TEXT",
	"BOOLEAN",
	"INTEGER",
	"FLOAT",
	"DATE",
	"OBJECT",
}

func (v *SearchConfigSchemaAttributeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchConfigSchemaAttributeType(value)
	for _, existing := range AllowedSearchConfigSchemaAttributeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchConfigSchemaAttributeType", value)
}

// NewSearchConfigSchemaAttributeTypeFromValue returns a pointer to a valid SearchConfigSchemaAttributeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchConfigSchemaAttributeTypeFromValue(v string) (*SearchConfigSchemaAttributeType, error) {
	ev := SearchConfigSchemaAttributeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchConfigSchemaAttributeType: valid values are %v", v, AllowedSearchConfigSchemaAttributeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchConfigSchemaAttributeType) IsValid() bool {
	for _, existing := range AllowedSearchConfigSchemaAttributeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to searchConfigSchemaAttributeType value
func (v SearchConfigSchemaAttributeType) Ptr() *SearchConfigSchemaAttributeType {
	return &v
}

type NullableSearchConfigSchemaAttributeType struct {
	value *SearchConfigSchemaAttributeType
	isSet bool
}

func (v NullableSearchConfigSchemaAttributeType) Get() *SearchConfigSchemaAttributeType {
	return v.value
}

func (v *NullableSearchConfigSchemaAttributeType) Set(val *SearchConfigSchemaAttributeType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchConfigSchemaAttributeType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchConfigSchemaAttributeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchConfigSchemaAttributeType(val *SearchConfigSchemaAttributeType) *NullableSearchConfigSchemaAttributeType {
	return &NullableSearchConfigSchemaAttributeType{value: val, isSet: true}
}

func (v NullableSearchConfigSchemaAttributeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchConfigSchemaAttributeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
