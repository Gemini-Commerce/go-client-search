/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchParamFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchParamFilter{}

// SearchParamFilter contains a list of document attributes and relative values which you want to filter search results
type SearchParamFilter struct {
	// JSON string that contains filters information to apply to search
	Filter               string                 `json:"filter"`
	Type                 *SearchParamFilterType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchParamFilter SearchParamFilter

// NewSearchParamFilter instantiates a new SearchParamFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchParamFilter(filter string) *SearchParamFilter {
	this := SearchParamFilter{}
	this.Filter = filter
	var type_ SearchParamFilterType = SEARCHPARAMFILTERTYPE_TERM
	this.Type = &type_
	return &this
}

// NewSearchParamFilterWithDefaults instantiates a new SearchParamFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchParamFilterWithDefaults() *SearchParamFilter {
	this := SearchParamFilter{}
	var type_ SearchParamFilterType = SEARCHPARAMFILTERTYPE_TERM
	this.Type = &type_
	return &this
}

// GetFilter returns the Filter field value
func (o *SearchParamFilter) GetFilter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *SearchParamFilter) GetFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *SearchParamFilter) SetFilter(v string) {
	o.Filter = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchParamFilter) GetType() SearchParamFilterType {
	if o == nil || IsNil(o.Type) {
		var ret SearchParamFilterType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParamFilter) GetTypeOk() (*SearchParamFilterType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchParamFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SearchParamFilterType and assigns it to the Type field.
func (o *SearchParamFilter) SetType(v SearchParamFilterType) {
	o.Type = &v
}

func (o SearchParamFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchParamFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filter"] = o.Filter
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchParamFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchParamFilter := _SearchParamFilter{}

	err = json.Unmarshal(data, &varSearchParamFilter)

	if err != nil {
		return err
	}

	*o = SearchParamFilter(varSearchParamFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filter")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchParamFilter) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchParamFilter) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchParamFilter struct {
	value *SearchParamFilter
	isSet bool
}

func (v NullableSearchParamFilter) Get() *SearchParamFilter {
	return v.value
}

func (v *NullableSearchParamFilter) Set(val *SearchParamFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchParamFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchParamFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchParamFilter(val *SearchParamFilter) *NullableSearchParamFilter {
	return &NullableSearchParamFilter{value: val, isSet: true}
}

func (v NullableSearchParamFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchParamFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
