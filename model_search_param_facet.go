/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchParamFacet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchParamFacet{}

// SearchParamFacet contains a list of document attributes which you want to be returned as aggregations by attribute values to make filter suggestions
type SearchParamFacet struct {
	// JSON string that contains the list of attributes you want to create aggregation to make filter suggestion
	Attribute string `json:"attribute"`
	// Limit of facets result
	Limit                *int64                `json:"limit,omitempty"`
	Type                 *SearchParamFacetType `json:"type,omitempty"`
	Params               *string               `json:"params,omitempty"`
	Name                 *string               `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchParamFacet SearchParamFacet

// NewSearchParamFacet instantiates a new SearchParamFacet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchParamFacet(attribute string) *SearchParamFacet {
	this := SearchParamFacet{}
	this.Attribute = attribute
	var type_ SearchParamFacetType = SEARCHPARAMFACETTYPE_TERMS
	this.Type = &type_
	return &this
}

// NewSearchParamFacetWithDefaults instantiates a new SearchParamFacet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchParamFacetWithDefaults() *SearchParamFacet {
	this := SearchParamFacet{}
	var type_ SearchParamFacetType = SEARCHPARAMFACETTYPE_TERMS
	this.Type = &type_
	return &this
}

// GetAttribute returns the Attribute field value
func (o *SearchParamFacet) GetAttribute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value
// and a boolean to check if the value has been set.
func (o *SearchParamFacet) GetAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attribute, true
}

// SetAttribute sets field value
func (o *SearchParamFacet) SetAttribute(v string) {
	o.Attribute = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SearchParamFacet) GetLimit() int64 {
	if o == nil || IsNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParamFacet) GetLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SearchParamFacet) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *SearchParamFacet) SetLimit(v int64) {
	o.Limit = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchParamFacet) GetType() SearchParamFacetType {
	if o == nil || IsNil(o.Type) {
		var ret SearchParamFacetType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParamFacet) GetTypeOk() (*SearchParamFacetType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchParamFacet) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SearchParamFacetType and assigns it to the Type field.
func (o *SearchParamFacet) SetType(v SearchParamFacetType) {
	o.Type = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *SearchParamFacet) GetParams() string {
	if o == nil || IsNil(o.Params) {
		var ret string
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParamFacet) GetParamsOk() (*string, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *SearchParamFacet) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given string and assigns it to the Params field.
func (o *SearchParamFacet) SetParams(v string) {
	o.Params = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SearchParamFacet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchParamFacet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SearchParamFacet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SearchParamFacet) SetName(v string) {
	o.Name = &v
}

func (o SearchParamFacet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchParamFacet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attribute"] = o.Attribute
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchParamFacet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attribute",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchParamFacet := _SearchParamFacet{}

	err = json.Unmarshal(data, &varSearchParamFacet)

	if err != nil {
		return err
	}

	*o = SearchParamFacet(varSearchParamFacet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attribute")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "type")
		delete(additionalProperties, "params")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchParamFacet) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchParamFacet) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchParamFacet struct {
	value *SearchParamFacet
	isSet bool
}

func (v NullableSearchParamFacet) Get() *SearchParamFacet {
	return v.value
}

func (v *NullableSearchParamFacet) Set(val *SearchParamFacet) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchParamFacet) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchParamFacet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchParamFacet(val *SearchParamFacet) *NullableSearchParamFacet {
	return &NullableSearchParamFacet{value: val, isSet: true}
}

func (v NullableSearchParamFacet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchParamFacet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
