/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResult{}

// SearchResult contains the search results, aggregations and paging information
type SearchResult struct {
	// index where the data were extrapolated
	Index  string        `json:"index"`
	Params *SearchParams `json:"params,omitempty"`
	// page number of the results you are processing
	Page *int64 `json:"page,omitempty"`
	// number of pages of results
	TotalPages *int64 `json:"totalPages,omitempty"`
	// number of total search results
	TotalHits *int64 `json:"totalHits,omitempty"`
	// search result records contained in the specified page
	Hits []string `json:"hits,omitempty"`
	// array of aggregation obtained by search result
	Aggregations         *map[string]SearchAggrMap `json:"aggregations,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchResult SearchResult

// NewSearchResult instantiates a new SearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResult(index string) *SearchResult {
	this := SearchResult{}
	this.Index = index
	return &this
}

// NewSearchResultWithDefaults instantiates a new SearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultWithDefaults() *SearchResult {
	this := SearchResult{}
	return &this
}

// GetIndex returns the Index field value
func (o *SearchResult) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *SearchResult) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *SearchResult) SetIndex(v string) {
	o.Index = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *SearchResult) GetParams() SearchParams {
	if o == nil || IsNil(o.Params) {
		var ret SearchParams
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetParamsOk() (*SearchParams, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *SearchResult) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given SearchParams and assigns it to the Params field.
func (o *SearchResult) SetParams(v SearchParams) {
	o.Params = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *SearchResult) GetPage() int64 {
	if o == nil || IsNil(o.Page) {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetPageOk() (*int64, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *SearchResult) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *SearchResult) SetPage(v int64) {
	o.Page = &v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *SearchResult) GetTotalPages() int64 {
	if o == nil || IsNil(o.TotalPages) {
		var ret int64
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetTotalPagesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalPages) {
		return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *SearchResult) HasTotalPages() bool {
	if o != nil && !IsNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given int64 and assigns it to the TotalPages field.
func (o *SearchResult) SetTotalPages(v int64) {
	o.TotalPages = &v
}

// GetTotalHits returns the TotalHits field value if set, zero value otherwise.
func (o *SearchResult) GetTotalHits() int64 {
	if o == nil || IsNil(o.TotalHits) {
		var ret int64
		return ret
	}
	return *o.TotalHits
}

// GetTotalHitsOk returns a tuple with the TotalHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetTotalHitsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalHits) {
		return nil, false
	}
	return o.TotalHits, true
}

// HasTotalHits returns a boolean if a field has been set.
func (o *SearchResult) HasTotalHits() bool {
	if o != nil && !IsNil(o.TotalHits) {
		return true
	}

	return false
}

// SetTotalHits gets a reference to the given int64 and assigns it to the TotalHits field.
func (o *SearchResult) SetTotalHits(v int64) {
	o.TotalHits = &v
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *SearchResult) GetHits() []string {
	if o == nil || IsNil(o.Hits) {
		var ret []string
		return ret
	}
	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetHitsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hits) {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *SearchResult) HasHits() bool {
	if o != nil && !IsNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given []string and assigns it to the Hits field.
func (o *SearchResult) SetHits(v []string) {
	o.Hits = v
}

// GetAggregations returns the Aggregations field value if set, zero value otherwise.
func (o *SearchResult) GetAggregations() map[string]SearchAggrMap {
	if o == nil || IsNil(o.Aggregations) {
		var ret map[string]SearchAggrMap
		return ret
	}
	return *o.Aggregations
}

// GetAggregationsOk returns a tuple with the Aggregations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetAggregationsOk() (*map[string]SearchAggrMap, bool) {
	if o == nil || IsNil(o.Aggregations) {
		return nil, false
	}
	return o.Aggregations, true
}

// HasAggregations returns a boolean if a field has been set.
func (o *SearchResult) HasAggregations() bool {
	if o != nil && !IsNil(o.Aggregations) {
		return true
	}

	return false
}

// SetAggregations gets a reference to the given map[string]SearchAggrMap and assigns it to the Aggregations field.
func (o *SearchResult) SetAggregations(v map[string]SearchAggrMap) {
	o.Aggregations = &v
}

func (o SearchResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index"] = o.Index
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.TotalPages) {
		toSerialize["totalPages"] = o.TotalPages
	}
	if !IsNil(o.TotalHits) {
		toSerialize["totalHits"] = o.TotalHits
	}
	if !IsNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	if !IsNil(o.Aggregations) {
		toSerialize["aggregations"] = o.Aggregations
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchResult := _SearchResult{}

	err = json.Unmarshal(data, &varSearchResult)

	if err != nil {
		return err
	}

	*o = SearchResult(varSearchResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "index")
		delete(additionalProperties, "params")
		delete(additionalProperties, "page")
		delete(additionalProperties, "totalPages")
		delete(additionalProperties, "totalHits")
		delete(additionalProperties, "hits")
		delete(additionalProperties, "aggregations")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchResult) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchResult) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchResult struct {
	value *SearchResult
	isSet bool
}

func (v NullableSearchResult) Get() *SearchResult {
	return v.value
}

func (v *NullableSearchResult) Set(val *SearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResult(val *SearchResult) *NullableSearchResult {
	return &NullableSearchResult{value: val, isSet: true}
}

func (v NullableSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
