/*
Search Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package search

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchConfigSchemaAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchConfigSchemaAttribute{}

// SearchConfigSchemaAttribute contains the configurations needed to define an attribute within documents
type SearchConfigSchemaAttribute struct {
	// attribute name
	Name string                           `json:"name"`
	Type *SearchConfigSchemaAttributeType `json:"type,omitempty"`
	// locale code (currently only it_IT and en_US are supported)
	Language             *string `json:"language,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchConfigSchemaAttribute SearchConfigSchemaAttribute

// NewSearchConfigSchemaAttribute instantiates a new SearchConfigSchemaAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchConfigSchemaAttribute(name string) *SearchConfigSchemaAttribute {
	this := SearchConfigSchemaAttribute{}
	this.Name = name
	var type_ SearchConfigSchemaAttributeType = SEARCHCONFIGSCHEMAATTRIBUTETYPE_TEXT
	this.Type = &type_
	return &this
}

// NewSearchConfigSchemaAttributeWithDefaults instantiates a new SearchConfigSchemaAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchConfigSchemaAttributeWithDefaults() *SearchConfigSchemaAttribute {
	this := SearchConfigSchemaAttribute{}
	var type_ SearchConfigSchemaAttributeType = SEARCHCONFIGSCHEMAATTRIBUTETYPE_TEXT
	this.Type = &type_
	return &this
}

// GetName returns the Name field value
func (o *SearchConfigSchemaAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SearchConfigSchemaAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SearchConfigSchemaAttribute) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchConfigSchemaAttribute) GetType() SearchConfigSchemaAttributeType {
	if o == nil || IsNil(o.Type) {
		var ret SearchConfigSchemaAttributeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchConfigSchemaAttribute) GetTypeOk() (*SearchConfigSchemaAttributeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchConfigSchemaAttribute) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SearchConfigSchemaAttributeType and assigns it to the Type field.
func (o *SearchConfigSchemaAttribute) SetType(v SearchConfigSchemaAttributeType) {
	o.Type = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *SearchConfigSchemaAttribute) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchConfigSchemaAttribute) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *SearchConfigSchemaAttribute) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *SearchConfigSchemaAttribute) SetLanguage(v string) {
	o.Language = &v
}

func (o SearchConfigSchemaAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchConfigSchemaAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchConfigSchemaAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchConfigSchemaAttribute := _SearchConfigSchemaAttribute{}

	err = json.Unmarshal(data, &varSearchConfigSchemaAttribute)

	if err != nil {
		return err
	}

	*o = SearchConfigSchemaAttribute(varSearchConfigSchemaAttribute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "language")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *SearchConfigSchemaAttribute) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *SearchConfigSchemaAttribute) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableSearchConfigSchemaAttribute struct {
	value *SearchConfigSchemaAttribute
	isSet bool
}

func (v NullableSearchConfigSchemaAttribute) Get() *SearchConfigSchemaAttribute {
	return v.value
}

func (v *NullableSearchConfigSchemaAttribute) Set(val *SearchConfigSchemaAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchConfigSchemaAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchConfigSchemaAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchConfigSchemaAttribute(val *SearchConfigSchemaAttribute) *NullableSearchConfigSchemaAttribute {
	return &NullableSearchConfigSchemaAttribute{value: val, isSet: true}
}

func (v NullableSearchConfigSchemaAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchConfigSchemaAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
